# Copyright (c) 2018. Mount Sinai School of Medicine
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
This contains GATK-related processing rules.
"""

from os.path import join

rule mark_dups:
  input:
    join(WORKDIR, "{prefix}_merged_aligned_coordinate_sorted.bam")
  output:
    bam = temp(join(WORKDIR, "{prefix}_aligned_coordinate_sorted_dups.bam")),
    tmpdir = temp(directory(join(WORKDIR, "{prefix}_tmp"))),
    metrics_file = join(WORKDIR, "{prefix}_markdups_metrics.txt")
  params:
    mem_gb = _mem_gb_for_ram_hungry_jobs(),
    tmpdir = join(WORKDIR, "{prefix}_tmp")
  benchmark:
    join(BENCHMARKDIR, "{prefix}_mark_dups.txt")
  log:
    join(LOGDIR, "{prefix}_mark_dups.log")
  resources:
    mem_mb = _mem_gb_for_ram_hungry_jobs() * 1024
  shell:
    "TMPDIR={params.tmpdir} "
    "MAX_SEQUENCES_FOR_DISK_READ_ENDS_MAP=50000 "
    "MAX_FILE_HANDLES_FOR_READ_ENDS_MAP=20000 "
    "SORTING_COLLECTION_SIZE_RATIO=0.250000 "
    "picard -Xmx{params.mem_gb}g -Djava.io.tmpdir={params.tmpdir} "
    "MarkDuplicates "
    "INPUT={input} OUTPUT={output.bam} "
    "VALIDATION_STRINGENCY=LENIENT METRICS_FILE={output.metrics_file} "
    "2> {log}"

rule sambamba_index_bam:
  input:
    join(WORKDIR, "{prefix}.bam")
  output:
    temp(join(WORKDIR, "{prefix}.bam.bai"))
  threads: _get_half_cores
  benchmark:
    join(BENCHMARKDIR, "{prefix}_sambamba_index.txt")
  log:
    join(LOGDIR, "{prefix}_sambamba_index.log")
  shell:
    "sambamba index -t {threads} {input} {output} 2> {log}"

# TODO(julia): figure out how to combine with RNA IndelRealigner rules, very similar

def _get_indel_realigner_target_creator_input(wildcards):
  inputs = [
    join(WORKDIR, "normal_aligned_coordinate_sorted_dups.bam"),
    join(WORKDIR, "tumor_aligned_coordinate_sorted_dups.bam"),
  ]
  if _rna_exists():
    inputs.append(
      join(WORKDIR, "rna_aligned_coordinate_sorted_dups_cigar_0-9MIDSHPX_filtered_sorted.bam"))
  return inputs
  

# if this rule is triggered with "chr" mapping to a chromosome in the input list of contigs, it'll
# run for that chromosome alone. If "chr" matches any other string, IndelRealignerTargetCreator
# will run for all chromosomes.
rule indel_realigner_target_creator:
  input:
    bams = _get_indel_realigner_target_creator_input,
    bais = expand(join(WORKDIR, "{type}_aligned_coordinate_sorted_dups.bam.bai"),
      type=["normal", "tumor"])
  output:
    temp(join(WORKDIR, "aligned_coordinate_sorted_dups_indelreal_{chr}.intervals"))
  params:
    mem_gb = _mem_gb_for_ram_hungry_jobs(),
    reference = config["reference"]["genome"]
  threads: _get_half_cores
  benchmark:
    join(BENCHMARKDIR, "indel_realigner_target_creator_{chr}.txt")
  log:
    join(LOGDIR, "indel_realigner_target_creator_{chr}.log")
  resources:
    mem_mb = _mem_gb_for_ram_hungry_jobs() * 1024
  run:
    intervals_str = _get_intervals_str(wildcards)
    input_str = ' '.join(['-I ' + x for x in input.bams])
    shell("""
      gatk -Xmx{params.mem_gb}g -T RealignerTargetCreator -R {params.reference} \
      %s %s \
      -o {output} -nt {threads} \
      --filter_reads_with_N_cigar --filter_mismatching_base_and_quals --filter_bases_not_stored \
      2> {log}
    """ % (intervals_str, input_str))

# if this rule is triggered with "chr" mapping to a chromosome in the input list of contigs, it'll
# run for that chromosome alone. If "chr" matches any other string, IndelRealigner will run for all
# chromosomes.
rule dna_indel_realigner_per_chr:
  input:
    bams = expand(join(WORKDIR, "{type}_aligned_coordinate_sorted_dups.bam"),
      type=["normal", "tumor"]),
    bais = expand(join(WORKDIR, "{type}_aligned_coordinate_sorted_dups.bam.bai"),
      type=["normal", "tumor"]),
    intervals = join(WORKDIR, "aligned_coordinate_sorted_dups_indelreal_{chr}.intervals")
  output:
    temp(expand(join(WORKDIR, "{type}_aligned_coordinate_sorted_dups_indelreal_chr_{{chr}}.{ext}"),
      type=["normal", "tumor"], ext=["bam", "bai"]))
  params:
    mem_gb = _mem_gb_for_ram_hungry_jobs(),
    output_dir = WORKDIR,
    reference = config["reference"]["genome"]
  benchmark:
    join(BENCHMARKDIR, "dna_indel_realigner_{chr}.txt")
  log:
    join(LOGDIR, "dna_indel_realigner_{chr}.log")
  resources:
    mem_mb = _mem_gb_for_ram_hungry_jobs() * 1024
  # IndelRealigner writes the output to this directory; need to move the files manually after
  run:
    intervals_str = _get_intervals_str(wildcards)
    input_str = ' '.join(['-I ' + x for x in input.bams])
    shell("""
      gatk -Xmx{params.mem_gb}g -T IndelRealigner -compress 0 -R {params.reference} \
      %s %s \
      -targetIntervals {input.intervals} \
      --filter_reads_with_N_cigar --filter_mismatching_base_and_quals --filter_bases_not_stored \
      --nWayOut _indelreal_chr_{wildcards.chr}.bam \
      2> {log} && \
      mv {{normal,tumor}}_aligned_coordinate_sorted_dups_indelreal_chr_{wildcards.chr}.bam \
      {params.output_dir} && \
      mv {{normal,tumor}}_aligned_coordinate_sorted_dups_indelreal_chr_{wildcards.chr}.bai \
      {params.output_dir}
    """ % (input_str, intervals_str))

if _PARALLEL_INDEL_REALIGNER:
  rule parallel_dna_indel_realigner:
    input:
      bam = expand(
        join(WORKDIR, "{{prefix}}_aligned_coordinate_sorted_dups_indelreal_chr_{chr}.bam"),
        chr=config["contigs"]),
      bai = expand(
        join(WORKDIR, "{{prefix}}_aligned_coordinate_sorted_dups_indelreal_chr_{chr}.bai"),
        chr=config["contigs"])
    output:
      bam = temp(join(WORKDIR, "{prefix}_aligned_coordinate_sorted_dups_indelreal.bam")),
      bai = temp(join(WORKDIR, "{prefix}_aligned_coordinate_sorted_dups_indelreal.bam.bai"))
    benchmark:
      join(BENCHMARKDIR, "{prefix}_indel_realigner.txt")
    log:
      join(LOGDIR, "{prefix}_indel_realigner.log")
    shell:
      "sambamba merge {output.bam} {input.bam}"
  ruleorder: parallel_dna_indel_realigner > sambamba_index_bam
else:
  rule non_parallel_dna_indel_realigner:
    input:
      bam = join(WORKDIR, "{prefix}_aligned_coordinate_sorted_dups_indelreal_chr_ALL.bam"),
      bai = join(WORKDIR, "{prefix}_aligned_coordinate_sorted_dups_indelreal_chr_ALL.bai")
    output:
      bam = temp(join(WORKDIR, "{prefix}_aligned_coordinate_sorted_dups_indelreal.bam")),
      bai = temp(join(WORKDIR, "{prefix}_aligned_coordinate_sorted_dups_indelreal.bam.bai"))
    benchmark:
      join(BENCHMARKDIR, "{prefix}_indel_realigner.txt")
    log:
      join(LOGDIR, "{prefix}_indel_realigner.log")
    shell:
      "mv {input.bam} {output.bam} && mv {input.bai} {output.bai}"
  ruleorder: non_parallel_dna_indel_realigner > sambamba_index_bam

rule base_recalibrator:
  input:
    bam = join(WORKDIR, "{prefix}_aligned_coordinate_sorted_dups_indelreal.bam"),
    bai = join(WORKDIR, "{prefix}_aligned_coordinate_sorted_dups_indelreal.bam.bai")
  output:
    temp(join(WORKDIR, "{prefix}_aligned_coordinate_sorted_dups_indelreal_bqsr.table"))
  params:
    mem_gb = _mem_gb_for_ram_hungry_jobs(),
    reference = config["reference"]["genome"],
    known_sites = config["reference"]["dbsnp"]
  threads: _get_half_cores
  benchmark:
    join(BENCHMARKDIR, "{prefix}_base_recalibrator.txt")
  log:
    join(LOGDIR, "{prefix}_base_recalibrator.log")
  resources:
    mem_mb = _mem_gb_for_ram_hungry_jobs() * 1024
  shell:
    "gatk -Xmx{params.mem_gb}g "
    "-T BaseRecalibrator -nct {threads} -R {params.reference} -I {input.bam} "
    "-knownSites {params.known_sites} -o {output} 2> {log}"

rule bqsr_print_reads:
  input:
    bam = join(WORKDIR, "{prefix}_aligned_coordinate_sorted_dups_indelreal.bam"),
    bai = join(WORKDIR, "{prefix}_aligned_coordinate_sorted_dups_indelreal.bam.bai"),
    bqsr = join(WORKDIR, "{prefix}_aligned_coordinate_sorted_dups_indelreal_bqsr.table")
  output:
    bam = temp(join(WORKDIR, "{prefix}_aligned_coordinate_sorted_dups_indelreal_bqsr.bam")),
    bai = temp(join(WORKDIR, "{prefix}_aligned_coordinate_sorted_dups_indelreal_bqsr.bai"))
  params:
    mem_gb = _mem_gb_for_ram_hungry_jobs(),
    reference = config["reference"]["genome"]
  threads: _get_half_cores
  benchmark:
    join(BENCHMARKDIR, "{prefix}_base_recalibrator_print_reads.txt")
  log:
    join(LOGDIR, "{prefix}_base_recalibrator_print_reads.log")
  resources:
    mem_mb = _mem_gb_for_ram_hungry_jobs() * 1024
  shell:
    "gatk -Xmx{params.mem_gb}g "
    "-T PrintReads -nct {threads} -R {params.reference} -I {input.bam} -BQSR {input.bqsr} "
    "-o {output.bam} 2> {log}"
