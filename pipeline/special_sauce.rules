# Copyright (c) 2018. Mount Sinai School of Medicine
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
This contains rules for our own data processing libraries.
"""

from os.path import join, dirname

# only define the Vaxrank rule if we have RNA and MHC alleles specified in the config
# TODO(julia): support inferring MHC alleles from seq2hla instead of requiring user input
if "mhc_alleles" in config["input"] and _rna_exists():
    
    def _get_vaxrank_input_vcfs(wildcards):
        return [join(WORKDIR, "%s.vcf" % vcf_type) for vcf_type in config["variant_callers"]]

    def _check_vaxrank_wildcards(wildcards):
        if wildcards.mhc_predictor != config["mhc_predictor"]:
            raise ValueError("Vaccine peptide report output filenames must match MHC predictor "
                "specified in config: %s" % config["mhc_predictor"])
        if wildcards.vcf_types != "-".join(config["variant_callers"]):
            raise ValueError("Vaccine peptide report output filenames must match variant callers "
                "specified in config: %s" % config["variant_callers"])

    rule vaxrank:
      input:
        vcfs = _get_vaxrank_input_vcfs,
        rna = join(WORKDIR, "rna.bam"),
        rna_index = join(WORKDIR, "rna.bam.bai")
      output:
        ascii_report = join(WORKDIR, "vaccine-peptide-report_{mhc_predictor}_{vcf_types}.txt"),
        json_file = join(WORKDIR, "vaccine-peptide-report_{mhc_predictor}_{vcf_types}.json"),
	    # commenting this out for now: will need to figure out wkhtmltopdf install in Docker image
        #pdf_report = join(WORKDIR, "vaccine-peptide-report_{mhc_predictor}_{vcf_types}.pdf"),
        all_passing_variants = join(WORKDIR, "all-passing-variants_{mhc_predictor}_{vcf_types}.csv")
      params:
        # excel report is a param because if there are no vaccine peptides, this output won't exist
        xlsx_report = join(WORKDIR, "vaccine-peptide-report_{mhc_predictor}_{vcf_types}.xlsx"),
        mhc_alleles = config["input"]["mhc_alleles"],
        patient_id = config["input"]["id"],
        vaccine_peptide_length = 25,
        padding_around_mutation = 5,
        max_vaccine_peptides_per_mutation = 3,
        min_mapping_quality = 1,
        min_variant_sequence_coverage = 1,
        min_alt_rna_reads = 2,
        mhc_epitope_lengths = "8-11"
      benchmark:
        join(BENCHMARKDIR, "vaxrank_{mhc_predictor}_{vcf_types}.txt")
      log:
        join(LOGDIR, "vaxrank_{mhc_predictor}_{vcf_types}.log")
      run:
        _check_vaxrank_wildcards(wildcards)
        vcf_input_str = ' '.join(['--vcf %s' % x for x in input.vcfs])
        shell("""
            vaxrank %s \
            --download-reference-genome-data \
            --bam {input.rna} \
            --mhc-predictor {wildcards.mhc_predictor} \
            --mhc-alleles %s \
            --output-ascii-report {output.ascii_report} \
            --output-xlsx-report {params.xlsx_report} \
            --output-json-file {output.json_file} \
            --output-passing-variants-csv {output.all_passing_variants} \
            --output-patient-id {params.patient_id} \
            --log-path {log} \
            --vaccine-peptide-length {params.vaccine_peptide_length} \
            --padding-around-mutation {params.padding_around_mutation} \
            --max-vaccine-peptides-per-mutation {params.max_vaccine_peptides_per_mutation} \
            --min-mapping-quality {params.min_mapping_quality} \
            --min-variant-sequence-coverage {params.min_variant_sequence_coverage} \
            --min-alt-rna-reads {params.min_alt_rna_reads} \
            --mhc-epitope-lengths {params.mhc_epitope_lengths}
            """ % (vcf_input_str, ",".join(params.mhc_alleles)))

    rule annotated_all_passing_variants:
      input:
        vcfs = _get_vaxrank_input_vcfs,
        tumor_rna_bam = join(WORKDIR, "rna.bam"),
        tumor_dna_bam = join(WORKDIR, "tumor.bam"),
        normal_dna_bam = join(WORKDIR, "normal.bam"),
        all_passing_variants = join(WORKDIR, "all-passing-variants_{mhc_predictor}_{vcf_types}.csv")
      output:
        annotated_all_passing_variants = join(WORKDIR, "annotated.all-passing-variants_{mhc_predictor}_{vcf_types}.csv")
      log:
        join(LOGDIR, "annotate_variants_{mhc_predictor}_{vcf_types}.log")
      run:
        _check_vaxrank_wildcards(wildcards)
        vcf_input_str = ' '.join(['--vcf %s %s' % (x.split("/")[-1].replace(".vcf", ""), x) for x in input.vcfs])
        shell("""
            python $SCRIPTS/annotate_variants.py \
                {input.all_passing_variants} \
                --bam normal_dna {input.normal_dna_bam} \
                --bam tumor_dna {input.tumor_dna_bam} \
                --bam tumor_rna {input.tumor_rna_bam} \
                %s \
                --output {output.annotated_all_passing_variants}
            """ % vcf_input_str)
