# Copyright (c) 2018. Mount Sinai School of Medicine
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import psutil

# This file contains pipeline constants and a few functions.

SAMPLE_ID = config["input"]["id"]
WORKDIR = os.path.join(config["workdir"], SAMPLE_ID)
SUPPORTED_FILETYPES = {".fastq.gz", ".fastq", ".bam"}

# TODO(julia): this is specific to GRCh37, populate these from the reference genome instead
_CHR = [str(x) for x in range(1, 23)] + ['X', 'Y', 'MT']

# will default to false, if not present in config
_PARALLEL_INDEL_REALIGNER = config.get("parallel_indel_realigner")

_READ_LENGTH = 124
_STAR_GENOME_DIR = os.path.join(
    os.path.dirname(config["reference"]["genome"]), "star-genome-%d" % _READ_LENGTH)


# Common functions

def _get_half_cores(_):
  n = _get_all_cores(_)
  return max(1, n // 2)

def _get_all_cores(_):
  if "num_threads" in config:
    return int(config["num_threads"])
  else:
    return psutil.cpu_count()

def _available_memory_gb():
  if "mem_gb" in config:
    return int(config["mem_gb"])
  else:
    bytes_per_gb = 1024 ** 3
    return max(1, psutil.virtual_memory().total // bytes_per_gb)

def _get_threads_for_alignment(_):
  if _available_memory_gb() < 20:
    return _get_half_cores(_)
  else:
    return _get_all_cores(_)

def _mem_gb_for_alignment():
  """
  6GB or as close to that as allowed by pipeline resources
  """
  return min(6, _available_memory_gb())

def _mem_gb_for_ram_hungry_jobs():
  """
  20GB or as close to that as allowed by pipeline resources
  """
  return min(20, _available_memory_gb())

def _get_intervals_str(wildcards):
  return "--intervals %s" % wildcards.chr if wildcards.chr in _CHR else ""

rule gunzip:
  input:
    "{prefix}.{ext}.gz"
  output:
    "{prefix}.{ext}"
  wildcard_constraints:
    ext="(gtf|vcf|fasta)"
  shell:
    "gunzip -c {input} > {output}"
