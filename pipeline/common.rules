# Copyright (c) 2018. Mount Sinai School of Medicine
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This file contains pipeline constants and a few functions.

import glob
from os.path import join, dirname, splitext

SAMPLE_ID = config["input"]["id"]
WORKDIR = join(config["workdir"], SAMPLE_ID)
LOGDIR = join(WORKDIR, "logs")
BENCHMARKDIR = join(WORKDIR, "benchmarks")
GENOMEDIR = dirname(config["reference"]["genome"])

SUPPORTED_FILETYPES = {".fastq.gz", ".fastq", ".bam"}

# will default to false, if not present in config
_PARALLEL_INDEL_REALIGNER = config.get("parallel_indel_realigner")

# Needed for RNA processing
_READ_LENGTH = 124
_STAR_GENOME_DIR = join(GENOMEDIR, "star-genome-%d" % _READ_LENGTH)

_IDEAL_ALIGNMENT_MEM_GB = 6
_IDEAL_LARGE_MEM_GB = 20

# Common functions

def _get_half_cores(_):
  return max(1, int(config["num_threads"]/2))

def _get_all_cores(_):
  return config["num_threads"]

def _get_threads_for_alignment(_):
  if _mem_gb_for_alignment() < _IDEAL_ALIGNMENT_MEM_GB:
    return _get_all_cores(_)
  else:
    return _get_half_cores(_)

# if available, return the ideal pretty-large amount for most jobs (20GB)
def _mem_gb_for_ram_hungry_jobs():
  return min(_IDEAL_LARGE_MEM_GB, config["mem_gb"])

# if available, return the ideal alignment amount (6GB)
def _mem_gb_for_alignment():
  return min(_IDEAL_ALIGNMENT_MEM_GB, config["mem_gb"])

def _get_intervals_str(wildcards):
  return "--intervals %s" % wildcards.chr if wildcards.chr in config["contigs"] else ""

def _rna_exists():
  return "rna" in config["input"]

def _get_fragment_ids(input_type):
  fragment_ids = []
  if input_type in config["input"]:
    for fragment in config["input"][input_type]:
      fragment_ids.append(fragment["fragment_id"])
  return fragment_ids

def _get_all_fastq_files(_):
    return glob.glob("%s/*.fastq.gz" % WORKDIR)

def sequence_dict_output():
  root, ext = splitext(config["reference"]["genome"])
  return root + ".dict"

rule gunzip:
  input:
    "{prefix}.{ext}.gz"
  output:
    "{prefix}.{ext}"
  wildcard_constraints:
    ext="(gtf|vcf|fasta)"
  shell:
    "gunzip -c {input} > {output}"
