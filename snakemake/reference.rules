# Copyright (c) 2018. Mount Sinai School of Medicine
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
This contains rules related to processing the reference genome, for both DNA and RNA.

NOTE: the reference genome directory must be writeable for these rules to work
"""

import os

# See this thread for explanation of some STAR genomeGenerate parameters:
# https://groups.google.com/forum/#!topic/rna-star/q3CZKHf9LOc
# We want to support both high- and low-memory runs, so need to tweak the defaults sometimes
def _mem_gb_for_star_genome_generate():
  return min(31, _available_memory_gb())

def _mem_mb_for_star_genome_generate():
  return _mem_gb_for_star_genome_generate() * 1024

def _mem_bytes_for_star_genome_generate():
  bytes_per_gb = 1024 ** 3
  return _mem_gb_for_star_genome_generate() * bytes_per_gb

def _suffix_array_sparsity_for_star_genome_generate():
  if _available_memory_gb() < 31:
    return 2
  else:
    return 1  # default

def _num_junctions_for_star_genome_generate():
  if _available_memory_gb() < 31:
    return 300000
  else:
    return 1000000  # default

# By default, STAR allows itself 31GB of memory to generate a genome. We may not have that
# available, and need to constrain to available memory.
rule star_align_reference:
  input:
    reference = config["reference"]["genome"],
    transcripts = config["reference"]["transcripts"]
  params:
    size = _READ_LENGTH,
    genome_dir = _STAR_GENOME_DIR,
    mem_bytes = _mem_bytes_for_star_genome_generate(),
    suffix_array_sparsity = _suffix_array_sparsity_for_star_genome_generate(),
    num_junctions = _num_junctions_for_star_genome_generate()
  resources:
    mem_mb = _mem_mb_for_star_genome_generate()
  output:
    os.path.join(_STAR_GENOME_DIR, "SA")
  threads: _get_all_cores
  log:
    os.path.join(WORKDIR, "star_align_reference.log")
  benchmark:
    os.path.join(WORKDIR, "star_align_reference_benchmark.txt")
  run:
    if not os.path.exists(params.genome_dir):
        shell("mkdir {params.genome_dir}")
    shell("""
        STAR \
        --runMode genomeGenerate \
        --genomeDir {params.genome_dir} \
        --genomeFastaFiles {input.reference} \
        --sjdbGTFfile {input.transcripts} \
        --sjdbOverhang {params.size} \
        --genomeSAsparseD {params.suffix_array_sparsity} \
        --limitSjdbInsertNsj {params.num_junctions} \
        --runThreadN {threads} \
        --limitGenomeGenerateRAM {params.mem_bytes} \
        >> {log} 2>&1
    """)

rule bwa_index_reference:
  input:
    reference = config["reference"]["genome"]
  output:
    expand("%s.{ext}" % config["reference"]["genome"], ext=["amb", "ann", "bwt", "pac", "sa"])
  benchmark:
    os.path.join(WORKDIR, "bwa_index_reference_benchmark.txt")
  log:
    os.path.join(WORKDIR, "bwa_index_reference.log")
  shell:
    "bwa index {input.reference} >> {log} 2>&1"

rule samtools_index_reference:
  input:
    reference = config["reference"]["genome"]
  output:
    config["reference"]["genome"] + ".fai"
  benchmark:
    os.path.join(WORKDIR, "samtools_index_reference_benchmark.txt")
  log:
    os.path.join(WORKDIR, "samtools_index_reference.log")
  shell:
    "samtools faidx {input.reference} >> {log} 2>&1"

rule picard_sequence_dict_reference:
  input:
    reference = config["reference"]["genome"]
  params:
    mem_gb = _available_memory_gb()
  resources:
    mem_mb = _available_memory_gb() * 1024
  output:
    config["reference"]["genome"].replace("fasta", "dict")
  benchmark:
    os.path.join(WORKDIR, "picard_sequence_dict_reference_benchmark.txt")
  log:
    os.path.join(WORKDIR, "picard_sequence_dict_reference.log")
  shell:
    "picard -Xmx{params.mem_gb}g "
    "CreateSequenceDictionary R={input.reference} O={output} >> {log} 2>&1"
