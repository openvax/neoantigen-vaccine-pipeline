# Copyright (c) 2018. Mount Sinai School of Medicine
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import subprocess

include:
    "common.rules"
include:
    "gatk.rules"
include:
    "alignment.rules"
include:
    "rna.rules"
include:
    "variant_calling.rules"
include:
    "special_sauce.rules"
include:
    "qc.rules"

# make a workdir "tmp" subdirectory if it doesn't exist - needed for some processes
if not os.path.exists("/outputs/tmp"):
  os.makedirs("/outputs/tmp")

# copy all fragments over to the sample-specific workdir, create if it doesn't exist
if not os.path.exists(WORKDIR):
  os.makedirs(WORKDIR)

# support any type of paired-end and single-end input, figure out what kind of input it is,
# copy over with a predictable name. Naming convention for files in workdir: normal_L1_R1.fastq.gz
# TODO(julia): make sure alignment works with any of those start points
def _determine_filetype(filename):
  for supported_filetype in SUPPORTED_FILETYPES:
    if filename.endswith(supported_filetype):
      return supported_filetype
  raise ValueError("Unsupported filetype in %s", filename)

def _copy_input(source, dest):
  print('Copying %s to %s' % (source, dest))
  if source.startswith("gs://"):
    # use gsutil cp to copy
    # is this any less safe than snakemake's "shell" directive?
    cmd = "gsutil -m cp %s %s" % (source, dest)
  else:
    cmd = "cp -p %s %s" % (source, dest)
  subprocess.call(cmd, shell=True)

for input_type in ["normal", "tumor", "rna"]:
  if input_type not in config["input"]:
    continue
    
  for fragment in config["input"][input_type]:

    if fragment["type"] == "paired-end":
      # TODO(julia): this assumes split FASTQs, which might not be the case: we might see a single
      # interleaved FASTQ someday. Worry about this later
      for read in [1, 2]:
        source = fragment["r%d" % read]
        filetype = _determine_filetype(source)
        # if the files already exist, don't copy anew
        dest = os.path.join(WORKDIR,
          "%s_%s_R%d%s" % (input_type, fragment["fragment_id"], read, filetype))
        if not (os.path.exists(dest)):
          _copy_input(source, dest)

    elif fragment["type"] == "single-end":
      source = fragment["r"]
      filetype = _determine_filetype(source)
      # if the files already exist, don't copy anew
      dest = os.path.join(WORKDIR, "%s_%s%s" % (input_type, fragment["fragment_id"], filetype))
      if not os.path.exists(dest):
        _copy_input(source, dest)

    else:
      raise ValueError("Unsupported input type: expected single-end or paired-end")
