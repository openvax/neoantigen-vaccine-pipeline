# Copyright (c) 2018. Mount Sinai School of Medicine
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from os.path import join

def _get_cosmic_str():
  cosmic = config["reference"].get("cosmic", None)
  return "--cosmic " + cosmic if cosmic else ""

rule rename_and_protect_dna_bams:
  input:
    normal = join(WORKDIR, "normal_aligned_coordinate_sorted_dups_indelreal_bqsr.bam"),
    normal_bai = join(WORKDIR, "normal_aligned_coordinate_sorted_dups_indelreal_bqsr.bai"),
    tumor = join(WORKDIR, "tumor_aligned_coordinate_sorted_dups_indelreal_bqsr.bam"),
    tumor_bai = join(WORKDIR, "tumor_aligned_coordinate_sorted_dups_indelreal_bqsr.bai")
  output:
    normal = protected(join(WORKDIR, "normal.bam")),
    normal_bai = protected(join(WORKDIR, "normal.bam.bai")),
    tumor = protected(join(WORKDIR, "tumor.bam")),
    tumor_bai = protected(join(WORKDIR, "tumor.bam.bai"))
  run:
    shell("""
        cp {input.normal} {output.normal} && \
        cp {input.normal_bai} {output.normal_bai} && \
        cp {input.tumor} {output.tumor} && \
        cp {input.tumor_bai} {output.tumor_bai}""")

# run a separate mutect task for each chromosome
#
# If not running in a Docker image, user must have these environment variables set:
# - JAVA7_BIN: directory of Java 1.7 installation, must contain java executable
# - MUTECT: path to MuTect executable
# TODO(julia): this should go in the config instead of being set by env variables
rule mutect_per_chr:
  input:
    normal = join(WORKDIR, "normal.bam"),
    tumor = join(WORKDIR, "tumor.bam")
  output:
    temp(join(WORKDIR, "mutect_{chr}.vcf.idx")),
    temp(join(WORKDIR, "mutect_{chr}.vcf.out")),
    temp(join(WORKDIR, "mutect_{chr}.vcf.coverage.wig")),
    vcf = temp(join(WORKDIR, "mutect_{chr}.vcf"))
  params:
    reference = config["reference"]["genome"],
    dbsnp = config["reference"]["dbsnp"]
  benchmark:
    join(BENCHMARKDIR, "mutect_{chr}.txt")
  log:
    join(LOGDIR, "mutect_{chr}.log")
  resources:
    mem_mb = 2000
  run:
    shell("""
        $JAVA7_BIN/java -Xmx2g -jar $MUTECT \
        --analysis_type MuTect \
        --reference_sequence {params.reference} \
        %s \
        --dbsnp {params.dbsnp} \
        --intervals {wildcards.chr} \
        --input_file:normal {input.normal} \
        --input_file:tumor {input.tumor} \
        --vcf {output.vcf} \
        --out {output.vcf}.out \
        --coverage_file {output.vcf}.coverage.wig \
        2> {log}
        """ % _get_cosmic_str())

rule mutect:
  input:
    expand(join(WORKDIR, "mutect_{chr}.vcf"), chr=config["contigs"])
  output:
    protected(join(WORKDIR, "mutect.vcf"))
  shell:
    "vcf-concat {input} > {output}"

rule mutect2_per_chr:
  input:
    normal = join(WORKDIR, "normal.bam"),
    tumor = join(WORKDIR, "tumor.bam")
  output:
    temp(join(WORKDIR, "mutect2_{chr}.vcf"))
  params:
    reference = config["reference"]["genome"],
    dbsnp = config["reference"]["dbsnp"]
  benchmark:
    join(BENCHMARKDIR, "mutect2_{chr}.txt")
  log:
    join(LOGDIR, "mutect2_{chr}.log")
  run:
    shell("""
        gatk -T MuTect2 \
        -I:normal {input.normal} \
        -I:tumor {input.tumor} \
        -R {params.reference} \
        --dbsnp {params.dbsnp} \
        %s \
        --intervals {wildcards.chr} \
        -o {output} \
        2> {log}
        """ % _get_cosmic_str())

rule mutect2:
  input:
    expand(join(WORKDIR, "mutect2_{chr}.vcf"), chr=config["contigs"])
  output:
    protected(join(WORKDIR, "mutect2.vcf"))
  shell:
    "vcf-concat {input} > {output}"

# If not running in a Docker image, user must have these environment variables set:
# - STRELKA_BIN: directory of Strelka installation, must contain configureStrelkaWorkflow.pl
# - STRELKA_CONFIG: path to Strelka config file
rule strelka:
  input:
    normal = join(WORKDIR, "normal.bam"),
    tumor = join(WORKDIR, "tumor.bam")
  output:
    temp(expand(join(WORKDIR, "strelka_output/results/variants/somatic.{type}.vcf.gz"),
      type=['snvs', 'indels']))
  params:
    output_dir = join(WORKDIR, "strelka_output"),
    reference = config["reference"]["genome"]
  benchmark:
    join(BENCHMARKDIR, "strelka.txt")
  log:
    join(LOGDIR, "strelka.log")
  threads: _get_all_cores
  shell:
    "rm -rf {params.output_dir}; "
    "$STRELKA_BIN/configureStrelkaSomaticWorkflow.py "
    "--normal {input.normal} "
    "--tumor {input.tumor} "
    "--ref {params.reference} "
    "--config $STRELKA_CONFIG "
    "--runDir {params.output_dir} &> {log}; "
    "cd {params.output_dir}; "
    "./runWorkflow.py -m local -j {threads} "
    ">> {log} 2>&1"

# This rule also deletes the Strelka output directory when it's done.
rule strelka_combine:
  input:
    snvs = join(WORKDIR, "strelka_output/results/variants/somatic.snvs.vcf.gz"),
    indels = join(WORKDIR, "strelka_output/results/variants/somatic.indels.vcf.gz")
  output:
    protected(join(WORKDIR, "strelka.vcf"))
  params:
    reference = config["reference"]["genome"],
    output_dir = join(WORKDIR, "strelka_output")
  benchmark:
    join(BENCHMARKDIR, "strelka_combine.txt")
  log:
    join(LOGDIR, "strelka_combine.log")
  shell:
    "gatk -T CombineVariants "
    "--variant:snvs {input.snvs} "
    "--variant:indels {input.indels} "
    "-R {params.reference} "
    "-genotypeMergeOptions PRIORITIZE "
    "-o {output} "
    "-priority snvs,indels "
    "2> {log} && "
    "rm -rf {params.output_dir}"

rule haplotype_caller_per_chr:
  input:
    normal = join(WORKDIR, "normal.bam")
  output:
    temp(join(WORKDIR, "normal_germline_snps_indels_{chr}.vcf"))
  params:
    reference = config["reference"]["genome"],
    dbsnp = config["reference"]["dbsnp"]
  benchmark:
    join(BENCHMARKDIR, "haplotype_caller_{chr}.txt")
  log:
    join(LOGDIR, "haplotype_caller_{chr}.log")
  shell:
    "gatk -T HaplotypeCaller "
    "-R {params.reference} "
    "-I {input.normal} "
    "--dbsnp {params.dbsnp} "
    "--intervals {wildcards.chr} "
    "-o {output} "
    ">> {log} 2>&1"

rule haplotype_caller:
  input:
    expand(join(WORKDIR, "normal_germline_snps_indels_{chr}.vcf"), chr=config["contigs"])
  output:
    join(WORKDIR, "normal_germline_snps_indels.vcf")
  shell:
    "vcf-concat {input} > {output}"

rule extract_snps:
  input:
    join(WORKDIR, "normal_germline_snps_indels.vcf")
  output:
    join(WORKDIR, "normal_germline_snps.vcf")
  params:
    reference = config["reference"]["genome"]
  benchmark:
    join(BENCHMARKDIR, "extract_snps.txt")
  log:
    join(LOGDIR, "extract_snps.log")
  shell:
    "gatk "
    "-T SelectVariants "
    "-R {params.reference} "
    "-V {input} "
    "-selectType SNP "
    "-o {output} "
    ">> {log} 2>&1"

# Filters recommended at https://software.broadinstitute.org/gatk/documentation/article.php?id=2806
rule filter_snps:
  input:
    join(WORKDIR, "normal_germline_snps.vcf")
  output:
    join(WORKDIR, "filtered_normal_germline_snps.vcf")
  params:
    reference = config["reference"]["genome"]
  benchmark:
    join(BENCHMARKDIR, "filter_snps_benchmark.txt")
  log:
    join(LOGDIR, "filter_snps.log")
  shell:
    "gatk " 
    "-T VariantFiltration "
    "-R {params.reference} "
    "-V {input} "
    "--filterExpression \"QD < 2.0 || FS > 60.0 || MQ < 40.0 || SOR > 3.0 || MQRankSum < -12.5 || ReadPosRankSum < -8.0\" "
    "--filterName \"gatk_snp_filter\" "
    "-o {output} "
    ">> {log} 2>&1"

rule extract_indels:
  input:
    join(WORKDIR, "normal_germline_snps_indels.vcf")
  output:
    join(WORKDIR, "normal_germline_indels.vcf")
  params:
    reference = config["reference"]["genome"]
  benchmark:
    join(BENCHMARKDIR, "extract_indels.txt")
  log:
    join(LOGDIR, "extract_indels.log")
  shell:
    "gatk "
    "-T SelectVariants "
    "-R {params.reference} "
    "-V {input} "
    "-selectType INDEL "
    "-o {output} "
    ">> {log} 2>&1"

# Filters recommended at https://software.broadinstitute.org/gatk/documentation/article.php?id=2806
rule filter_indels:
  input:
    join(WORKDIR, "normal_germline_indels.vcf")
  output:
    join(WORKDIR, "filtered_normal_germline_indels.vcf")
  params:
    reference = config["reference"]["genome"]
  benchmark:
    join(BENCHMARKDIR, "filter_indels.txt")
  log:
    join(LOGDIR, "filter_indels.log")
  shell:
    "gatk " 
    "-T VariantFiltration "
    "-R {params.reference} "
    "-V {input} "
    "--filterExpression \"QD < 2.0 || FS > 200.0 || SOR > 10.0 || ReadPosRankSum < -20.0\" "
    "--filterName \"gatk_indel_filter\" "
    "-o {output} "
    ">> {log} 2>&1"

rule combine_germline_variants:
  input:
    expand(join(WORKDIR, "filtered_normal_germline_{var}.vcf"), var=["snps", "indels"])
  output:
    join(WORKDIR, "filtered_normal_germline_snps_indels.vcf")
  shell:
    "vcf-concat {input} > {output}"

if "capture_kit_coverage_file" in config["reference"]:
  rule intersect_with_coverage_file:
    input:
      join(WORKDIR, "filtered_normal_germline_snps_indels.vcf")
    output:
      join(WORKDIR, "filtered_covered_normal_germline_snps_indels.vcf")
    params:
      coverage_file = config["reference"]["capture_kit_coverage_file"]
    shell:
      "bedtools intersect -a {input} -b {params.coverage_file} -header > {output}"
